<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Corne de Brume et Bips</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            text-align: center;
            padding: 50px;
            background-color: #f0f0f0;
        }
        h1 {
            color: #333;
        }
        #now-playing {
            margin-top: 30px;
            font-size: 20px;
            color: #666;
        }
    </style>
</head>
<body>
    <h1>Corne de Brume et Bips Longs</h1>

    <div id="now-playing">Son en cours...</div>

    <script>
        let audioCtx;
        let fogHornInterval, beepInterval;
        let gainNode, oscillator;

        function startFogHornAndBeeps() {
            audioCtx = new (window.AudioContext || window.webkitAudioContext)();
            
            function playFogHorn() {
                oscillator = audioCtx.createOscillator();
                gainNode = audioCtx.createGain();
                
                oscillator.type = 'sine'; // Son de la corne de brume
                oscillator.frequency.setValueAtTime(250, audioCtx.currentTime);
                
                gainNode.gain.setValueAtTime(1, audioCtx.currentTime);
                oscillator.connect(gainNode);
                gainNode.connect(audioCtx.destination);
                
                oscillator.start();
                
                fogHornInterval = setInterval(() => {
                    gainNode.gain.setValueAtTime(50, audioCtx.currentTime);
                    setTimeout(() => {
                        gainNode.gain.setValueAtTime(0.3, audioCtx.currentTime);
                    }, 1500);
                    
                }, 3500);
            }
            
            function playBeeps() {
                const beepIntervalDuration = 1000;
                const beepDuration = 600;
                
                function singleBeep() {
                    const beepOscillator = audioCtx.createOscillator();
                    const beepGainNode = audioCtx.createGain();
                    
                    beepOscillator.type = 'sine';
                    beepOscillator.frequency.setValueAtTime(880, audioCtx.currentTime);
                    
                    beepGainNode.gain.setValueAtTime(0.5, audioCtx.currentTime);
                    beepOscillator.connect(beepGainNode);
                    beepGainNode.connect(audioCtx.destination);
                    
                    beepOscillator.start();
                    beepOscillator.stop(audioCtx.currentTime + (beepDuration / 1000));
                }
                
                beepInterval = setInterval(() => {
                    singleBeep();
                    setTimeout(singleBeep, beepIntervalDuration);
                    setTimeout(singleBeep, 2 * beepIntervalDuration);
                }, 60000);
            }

            playFogHorn();
            playBeeps();
        }

        function stopFogHornAndBeeps() {
            clearInterval(fogHornInterval);
            clearInterval(beepInterval);
            if (oscillator) oscillator.stop();
            if (gainNode) gainNode.gain.setValueAtTime(0, audioCtx.currentTime);
        }

        // Utilisation de BroadcastChannel pour écouter les messages de contrôle
        const channel = new BroadcastChannel('audio_control');

        channel.onmessage = (event) => {
            if (event.data === 'start') {
                startFogHornAndBeeps();
            } else if (event.data === 'stop') {
                stopFogHornAndBeeps();
            }
        };
    </script>
</body>
</html>
